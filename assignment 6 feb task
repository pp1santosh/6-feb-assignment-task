{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5e5fcfb4-535e-4ffd-b649-ecbc7bda2764",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([1,\n",
       "  2,\n",
       "  3,\n",
       "  4,\n",
       "  44,\n",
       "  55,\n",
       "  66,\n",
       "  34,\n",
       "  56,\n",
       "  78,\n",
       "  89,\n",
       "  34,\n",
       "  1,\n",
       "  2,\n",
       "  3,\n",
       "  1,\n",
       "  4,\n",
       "  34,\n",
       "  55,\n",
       "  67,\n",
       "  78,\n",
       "  89,\n",
       "  45,\n",
       "  22,\n",
       "  61,\n",
       "  34,\n",
       "  56],\n",
       " 4134711838987085478833841242112000)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 1 sol\n",
    "def product_list(l):\n",
    "    c=[]\n",
    "    for i in l:\n",
    "        if type(i)==float or type(i)==int:\n",
    "            c.append(i)\n",
    "        elif type(i)==list:\n",
    "            for num1 in i:\n",
    "                if type(num1)==int:\n",
    "                    c.append(num1)\n",
    "        elif type(i)== set:\n",
    "            for num2 in i:\n",
    "                 if type(num2)==int:\n",
    "                    c.append(num2)\n",
    "        elif type(i)== tuple:\n",
    "            for num3 in i:\n",
    "                 if type(num3)==int:\n",
    "                    c.append(num3)\n",
    "        elif type(i)==dict :\n",
    "            for key1 in i.keys():\n",
    "                if type(key1)==int or type(key1)==float:\n",
    "                    c.append(key1)       \n",
    "                else:\n",
    "                    pass\n",
    "            for val1 in i.values():\n",
    "                if type(val1)==int:\n",
    "                    c.append(val1)\n",
    "                elif type(val1)==list or type(val1)==tuple:\n",
    "                    for g in val1:\n",
    "                        c.append(g)\n",
    "                else:\n",
    "                    pass\n",
    "        else:\n",
    "            pass    \n",
    "    product=1\n",
    "    for num5 in c:\n",
    "        product=product*num5\n",
    "    return c, product    \n",
    "        \n",
    "list1 = [1,2,3,4, [44,55,66, True], False, (34,56,78,89,34), {1,2,3,3,2,1}, {1:34, \"key2\": [55, 67, 78, 89], 4: (45, \n",
    "22, 61, 34)}, [56, 'data science'], 'Machine Learning']\n",
    "product_list(list1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5f9595f-04af-4d2c-98a7-316de7975528",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2\n",
    "str_1= \"I want to become a Data Scientist.\"\n",
    "c=str.lower(str_1)\n",
    "f=c.replace('a','z').replace('b','y').replace('c','x').replace(' ','$')\n",
    "f"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
